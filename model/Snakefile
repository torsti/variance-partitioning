configfile: 'model.yaml'
configfile: 'definitions.yaml'

models     = [x['id'] for x in config['definitions']['model']['scope']]
parameters = [x['id'] for x in config['definitions']['model']['parameter']]
scopes     = [x['id'] for x in config['definitions']['variance partitioning']['scope']]
partitions = [x['id'] for x in config['definitions']['variance partitioning']['partition']]

wildcard_constraints:
    model     = '(?:' + '|'.join(models) + ')',
    parameter = '(?:' + '|'.join(parameters) + ')',
    scope     = '(?:' + '|'.join(scopes) + ')',
    partition = '(?:' + '|'.join(partitions) + ')'

subworkflow data:
    workdir: '../data'

rule:
    input:
        expand(['core/sample/complete/{parameter}/covariance.rds',
                'core/sample/conditional/{parameter}/vegetation.rds',
                'core/sample/within-between/{parameter}/patch.rds',
                'core/population/complete/{parameter}/covariance.rds'],
               parameter = ['mean', 'distribution'])

rule inference:
    input:
        model_data = data('model_data.tsv'),
        patch_data = data('patch_data.tsv'),
        covariates = data('covariates.tsv'),
        mesh       = data('mesh.rds')
    output:
        fit = protected('{model}/fit.rds')
    threads:
        workflow.cores
    params:
        spde_range     = [1, 0.05],
        spde_sigma     = [1, 0.5],
        iid_u          = 1,
        iid_alpha      = 0.5,
        covariate_prec = 1,
        intercept_prec = 0.01,
        core_area      = config['core']['survey_areas']
    message:
        'Fit model with {wildcards.model} data using R-INLA.'
    script:
        'inference.R'

rule extract_parameters:
    input:
        fit = '{model}/fit.rds'
    output:
        parameters = '{model}/{parameter}.rds'
    params:
        samples = 1000
    threads:
        lambda w: workflow.cores if w.parameter == 'distribution' else 1
    script:
        'extract_parameters.R'

rule covariance:
    input:
        parameters = '{model}/{parameter}.rds',
        model_data = data('model_data.tsv'),
        patch_data = data('patch_data.tsv'),
        covariates = data('covariates.tsv'),
        mesh       = data('mesh.rds')
    output:
        covariance = '{model}/{scope}/{partition}/{parameter}/covariance.rds'
    wildcard_constraints:
        partition = 'complete'
    threads:
        lambda w: workflow.cores if w.parameter == 'distribution' else 1
    params:
        core_area = config['core']['survey_areas']
    message:
        'Extract covariance of linear terms for {wildcards.model} model using {wildcards.parameter} to approximate joint posterior'
    script:
        'covariance.R'

rule conditional_covariance:
    input:
        parameters = '{model}/{parameter}.rds',
        model_data = data('model_data.tsv'),
        patch_data = data('patch_data.tsv'),
        covariates = data('covariates.tsv'),
        mesh       = data('mesh.rds')
    output:
        covariance = '{model}/{scope}/{partition}/{parameter}/{condition}.rds'
    wildcard_constraints:
        partition = '(?:conditional|within-between)'
    threads:
        lambda w: workflow.cores if w.parameter == 'distribution' else 1
    params:
        core_area = config['core']['survey_areas']
    message:
        'Extract covariance of linear terms for {wildcards.model} model using {wildcards.parameter} to approximate joint posterior'
    script:
        'covariance.R'
