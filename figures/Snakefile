configfile: 'figures.yaml'
configfile: '../model/model.yaml'

subworkflow data:
    workdir: '../data'

subworkflow variance:
    workdir: '../variance'

subworkflow maps:
    workdir: 'data'

rule:
    input:
        expand(
            '{figure}.{ext}',
            figure = [
                'covariate_class_panel',
                'study_area',
                'mesh_map'],
            ext = ['pdf', 'png']
        ),
        expand(
            'core/sample/covariate_class/{figure}.{ext}',
            figure = [
                'measure',
                'covariance'],
            ext = ['pdf', 'png']
        )

rule panel_plot:
    input:
        survey_areas = data('survey_map.tsv'),
        V            = variance('core/sample/complete/grouped/distribution/{group}/variance_partition.rds'),
        P            = variance('core/sample/complete/grouped/distribution/{group}/diagonal_variance_partition.rds'),
        V_mu         = variance('core/sample/complete/grouped/mean/{group}/variance_partition.rds'),
        P_mu         = variance('core/sample/complete/grouped/mean/{group}/diagonal_variance_partition.rds'),
        V_pop        = variance('core/population/complete/grouped/distribution/{group}/variance_partition.rds'),
        P_pop        = variance('core/population/complete/grouped/distribution/{group}/diagonal_variance_partition.rds'),
        V_pop_mu     = variance('core/population/complete/grouped/mean/{group}/variance_partition.rds'),
        P_pop_mu     = variance('core/population/complete/grouped/mean/{group}/diagonal_variance_partition.rds'),
        V_wb         = variance('core/sample/within-between/grouped/distribution/{group}/patch/variance_partition.rds'),
        V_wb_mu      = variance('core/sample/within-between/grouped/mean/{group}/patch/variance_partition.rds'),
        V_cond       = variance('core/sample/conditional/grouped/distribution/{group}/vegetation/variance_partition.rds'),
        V_cond_mu    = variance('core/sample/conditional/grouped/mean/{group}/vegetation/variance_partition.rds')
    output:
        '{group}_panel.pdf'
    wildcard_constraints:
        group = 'covariate_class'
    params:
        font_family = config['figures']['font_family'],
        V_color = 'lightblue',
        P_color = 'palevioletred',
        core_areas = config['core']['survey_areas']
    script:
        'panel_plot.R'

rule covariance_plot:
    input:
        V = variance('core/sample/complete/grouped/distribution/{group}/variance_partition.rds'),
        R = variance('core/sample/complete/grouped/distribution/{group}/correlation_matrix.rds')
    output:
        '{model}/{scope}/{group}/covariance.pdf'
    wildcard_constraints:
        model = 'core',
        scope = 'sample',
        group = 'covariate_class'
    params:
        font_family = config['figures']['font_family']
    script: 'covariance_plot.R'

rule measure_plot:
    input:
        V = variance('{model}/{scope}/complete/grouped/distribution/{group}/variance_partition.rds'),
        U = variance('{model}/{scope}/complete/grouped/distribution/{group}/unique_variance_partition.rds'),
        M = variance('{model}/{scope}/complete/grouped/distribution/{group}/marginal_variance_partition.rds'),
    output:
        '{model}/{scope}/{group}/measure.pdf'
    wildcard_constraints:
        model = 'core',
        scope = 'sample',
        group = 'covariate_class'
    params:
        font_family = config['figures']['font_family']
    script: 'measure_plot.R'

rule study_area_plot:
    input:
        survey_areas = data('survey_map.tsv'),
        patch_data   = data('patch_data.tsv'),
        sphere       = maps('sphere_110m_land.gml'),
        land         = maps('gshhg-shp-2.3.7.zip'),
        lifecycle    = maps('life_cycle.svg'),
        nest         = 'data/nest.jpg'
    output:
        'study_area.pdf'
    params:
        survey_areas = config['core']['survey_areas']
    script:
        'study_area_plot.R'

rule mesh_plot:
    input:
        survey_areas = data('survey_map.tsv'),
        patch_data   = data('patch_data.tsv'),
        mesh         = data('mesh.rds'),
        land         = maps('gshhg-shp-2.3.7.zip')
    output:
        'mesh_map.pdf'
    params:
        font_family = config['figures']['font_family'],
    script:
        'mesh_map_plot.R'

rule pdf_to_png:
    input:
        '{plot}.pdf'
    output:
        '{plot}.png'
    params:
        resolution = 300
    shell:
        'pdftocairo -r {params.resolution} -singlefile -png {input:q} {wildcards.plot:q}'
